{"version":3,"sources":["components/Navbar/Navbar.js","components/WeatherCard/WeatherCard.js","components/BackupCard/BackupCard.js","components/Dropdown/Dropdown.js","components/Home/Home.js","components/Cities/Cities.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","styleNav","color","className","to","style","axios","require","default","WeatherCard","props","history","useHistory","value","currentCity","useState","forDegree","setforDegree","currentTemp","setcurrentTemp","currentMain","setcurrentMain","MinTemp","setMinTemp","MaxTemp","setMaxTemp","tempInCelcius","settempInCelcius","minInCelcius","setminInCelcius","maxInCelcius","setmaxInCelcius","tempInKelvin","settempInKelvin","minInKelvin","setminInKelvin","maxInKelvin","setmaxInKelvin","tempInFahrenheit","settempInFahrenheit","minInFahrenheit","setminInFahrenheit","maxInFahrenheit","setmaxInFahrenheit","useEffect","get","then","resp","console","log","data","main","temp","minTempInCelcius","temp_min","maxTempInCelcius","temp_max","weather","count","setcount","post","myCityName","myTemp","myMinTemp","myMaxTemp","response","push","id","onClick","BackupCard","Dropdown","Cities","setCities","setvalue","onChange","selectedCity","document","getElementById","map","city","name","key","Home","mycities","setmycities","isbutton","setisbutton","myid","setmyid","fetchedResult","delete","items","handleDelete","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.36dc9f20.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../Navbar/Navbar.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Navbar() {\r\n  const styleNav = {\r\n    color: \"white\",\r\n  };\r\n\r\n  return (\r\n    <nav>\r\n      <h1>My Weather Application</h1>\r\n      <ul className=\"nav-links\">\r\n        <Link to=\"/\" style={styleNav}>\r\n          <li>Home</li>\r\n        </Link>\r\n        <Link to=\"/cities\" style={styleNav}>\r\n          <li>Cities</li>\r\n        </Link>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"../WeatherCard/WeatherCard.css\";\r\nimport { useState, useEffect } from \"react\";\r\n// import Axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\nconst axios = require('axios').default;\r\n\r\nconst WeatherCard = (props) => {\r\n  const history = useHistory();\r\n  const value = props.currentCity;\r\n\r\n  const [forDegree, setforDegree] = useState(\"°C\");\r\n\r\n  const [currentTemp, setcurrentTemp] = useState();\r\n  const [currentMain, setcurrentMain] = useState();\r\n  const [MinTemp, setMinTemp] = useState();\r\n  const [MaxTemp, setMaxTemp] = useState();\r\n\r\n  const [tempInCelcius, settempInCelcius] = useState();\r\n  const [minInCelcius, setminInCelcius] = useState();\r\n  const [maxInCelcius, setmaxInCelcius] = useState();\r\n\r\n  const [tempInKelvin, settempInKelvin] = useState();\r\n  const [minInKelvin, setminInKelvin] = useState();\r\n  const [maxInKelvin, setmaxInKelvin] = useState();\r\n\r\n  const [tempInFahrenheit, settempInFahrenheit] = useState();\r\n  const [minInFahrenheit, setminInFahrenheit] = useState();\r\n  const [maxInFahrenheit, setmaxInFahrenheit] = useState();\r\n\r\n  useEffect(() => {\r\n    axios.get(\r\n      `https://api.openweathermap.org/data/2.5/weather?q=${value}&appid=a493ff8e0f4519b969db26636f451622`\r\n    ).then((resp) => {\r\n      console.log(resp.data);\r\n\r\n      /* 0K − 273.15 = -273.1°C */\r\n      const tempInCelcius = resp.data.main.temp - 273.15;\r\n      const minTempInCelcius = resp.data.main.temp_min - 273.15;\r\n      const maxTempInCelcius = resp.data.main.temp_max - 273.15;\r\n\r\n      /* Kelvin */\r\n      const tempInKelvin = resp.data.main.temp;\r\n      const minInKelvin = resp.data.main.temp_min;\r\n      const maxInKelvin = resp.data.main.temp_max;\r\n\r\n      /* (0K − 273.15) × 9/5 + 32 = -459.7°F */\r\n      const tempInFahrenheit = (resp.data.main.temp - 273.15) * (9 / 5) + 32;\r\n      const minInFahrenheit = (resp.data.main.temp_min - 273.15) * (9 / 5) + 32;\r\n      const maxInFahrenheit = (resp.data.main.temp_max - 273.15) * (9 / 5) + 32;\r\n\r\n      setcurrentTemp(tempInCelcius);\r\n      setcurrentMain(resp.data.weather[0].main);\r\n      setMinTemp(minTempInCelcius);\r\n      setMaxTemp(maxTempInCelcius);\r\n\r\n      settempInCelcius(tempInCelcius);\r\n      setminInCelcius(minTempInCelcius);\r\n      setmaxInCelcius(maxTempInCelcius);\r\n\r\n      settempInKelvin(tempInKelvin);\r\n      setminInKelvin(minInKelvin);\r\n      setmaxInKelvin(maxInKelvin);\r\n\r\n      settempInFahrenheit(tempInFahrenheit);\r\n      setminInFahrenheit(minInFahrenheit);\r\n      setmaxInFahrenheit(maxInFahrenheit);\r\n    });\r\n  }, [value]);\r\n\r\n  function convertToCelcius() {\r\n    console.log(\"convertToCelcius\");\r\n    setforDegree(\"°C\");\r\n    setcurrentTemp(tempInCelcius);\r\n    setMinTemp(minInCelcius);\r\n    setMaxTemp(maxInCelcius);\r\n  }\r\n\r\n  function convertToKelvin() {\r\n    console.log(\"convertToKelvin\");\r\n    setforDegree(\"°K\");\r\n    setcurrentTemp(tempInKelvin);\r\n    setMinTemp(minInKelvin);\r\n    setMaxTemp(maxInKelvin);\r\n  }\r\n\r\n  function convertToFahrenheit() {\r\n    setforDegree(\"°F\");\r\n    console.log(\"convertToFahrenheit\");\r\n    setcurrentTemp(tempInFahrenheit);\r\n    setMinTemp(minInFahrenheit);\r\n    setMaxTemp(maxInFahrenheit);\r\n  }\r\n\r\n  const [count, setcount] = useState(0);\r\n\r\n  function addToCityHandler() {\r\n    setcount(count + 1);\r\n    console.log(count);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (count > 0) {\r\n      axios.post(\r\n        \"https://weather-application-bbc94.firebaseio.com/mycities.json\",\r\n        {\r\n          myCityName: value,\r\n          myTemp: currentTemp,\r\n          myMinTemp: MinTemp,\r\n          myMaxTemp: MaxTemp,\r\n        }\r\n      ).then((response) => {\r\n        console.log(response.data);\r\n        history.push(\"/cities\");\r\n      });\r\n    }\r\n  }, [count]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"what\">\r\n        <p>{value}</p>\r\n        <h1 className=\"currentTemp\" id=\"changingTemp\">\r\n          {currentTemp} {forDegree}\r\n        </h1>\r\n        <span className=\"spantag\">{currentMain}</span>\r\n        <span className=\"spantag\">\r\n          {MinTemp} {forDegree} /{MaxTemp} {forDegree}\r\n        </span>\r\n        <br />\r\n        <div className=\"changingUnit\">\r\n          Temperature Type: <button onClick={convertToCelcius}>°C</button>\r\n          <button onClick={convertToKelvin}>°K</button>\r\n          <button onClick={convertToFahrenheit}>°F</button>\r\n        </div>\r\n      </div>\r\n      <button className=\"addToCities\" onClick={addToCityHandler}>\r\n        Add {value} to My Cities\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","import React from 'react'\r\nimport \"../BackupCard/BackupCard.css\"\r\n\r\nfunction BackupCard() {\r\n    return (\r\n        <div className=\"backupCard\">\r\n            *Please Select a City\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BackupCard\r\n","import React from \"react\";\r\nimport \"../Dropdown/Dropdown.css\";\r\nimport { useState, useEffect } from \"react\";\r\n// import axios from 'axios';\r\nimport WeatherCard from \"../WeatherCard/WeatherCard\";\r\nimport BackupCard from \"../BackupCard/BackupCard\";\r\nconst axios = require(\"axios\").default;\r\n\r\nconst Dropdown = () => {\r\n  const [Cities, setCities] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"https://weather-application-bbc94.firebaseio.com/cities.json\")\r\n      .then((resp) => {\r\n        console.log(resp.data);\r\n        setCities(resp.data);\r\n      });\r\n  }, []);\r\n\r\n  const [value, setvalue] = useState();\r\n\r\n  const handleOptionChange = () => {\r\n    const selectedCity = document.getElementById(\"selectedCity\").value;\r\n    console.log(selectedCity);\r\n    if (selectedCity != null) setvalue(selectedCity);\r\n    else {\r\n      setvalue(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form className=\"dropdown\">\r\n        <label id=\"selectACity\">Select a city:</label>\r\n        <select id=\"selectedCity\" onChange={handleOptionChange}>\r\n          <option value=\"null\">Nothing is selected</option>\r\n          {Cities.map((city) => (\r\n            <option value={city.name} key={city.name}>\r\n              {city.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </form>\r\n      <div>{value ? <WeatherCard currentCity={value} /> : <BackupCard />}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dropdown;\r\n","import React from \"react\";\r\nimport Dropdown from \"../Dropdown/Dropdown\";\r\nfunction Home() {\r\n  return (\r\n    <div>\r\n      <Dropdown />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport \"../Cities/Cities.css\";\r\n// import Axios from 'axios';\r\nimport { useState, useEffect } from \"react\";\r\nconst axios = require(\"axios\").default;\r\n\r\nfunction Cities() {\r\n  const [mycities, setmycities] = useState([]);\r\n\r\n  const [isbutton, setisbutton] = useState(false);\r\n  const [myid, setmyid] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`https://weather-application-bbc94.firebaseio.com/mycities.json`)\r\n      .then((response) => {\r\n        const fetchedResult = [];\r\n        for (let key in response.data) {\r\n          fetchedResult.push({\r\n            ...response.data[key],\r\n            id: key,\r\n          });\r\n        }\r\n        setmycities(fetchedResult);\r\n      });\r\n  }, [mycities]);\r\n\r\n  function handleDelete(id) {\r\n    setisbutton(true);\r\n    setmyid(id);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isbutton === true) {\r\n      console.log(\"Delete button\");\r\n      axios\r\n        .delete(\r\n          `https://weather-application-bbc94.firebaseio.com/mycities/${myid}.json`\r\n        )\r\n        .then((response) => {\r\n          console.log(response);\r\n        });\r\n    }\r\n    setisbutton(false);\r\n  });\r\n\r\n  function handleCelcius() {\r\n    console.log(\"Celcius\");\r\n  }\r\n\r\n  function handleKelvin() {\r\n    console.log(\"Kelvin\");\r\n  }\r\n\r\n  function handleFahrenheit() {\r\n    console.log(\"Fahrenheit\");\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h3>My Cities</h3>\r\n      <div className=\"myCitiesButton\">\r\n        <span>Selected Temperature Type:</span>\r\n        <button onClick={handleCelcius} className=\"tempButton\">\r\n          °C\r\n        </button>\r\n        <button onClick={handleKelvin} className=\"tempButton\">\r\n          °K\r\n        </button>\r\n        <button onClick={handleFahrenheit} className=\"tempButton\">\r\n          °F\r\n        </button>\r\n      </div>\r\n\r\n      <>\r\n        {mycities.map((items) => (\r\n          <div key={items.id} className=\"myOuterInlineDiv\">\r\n            <div className=\"myInlineDiv\">\r\n              <span className=\"cityName\"> {items.myCityName} </span>\r\n              <span className=\"temp\"> {items.myTemp} °C</span>\r\n            </div>\r\n            <button\r\n              className=\"deleteButton\"\r\n              onClick={(id) => handleDelete(items.id)}\r\n            >\r\n              Remove\r\n            </button>\r\n          </div>\r\n        ))}\r\n      </>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Cities;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"./App.css\";\n// import Header from \"./components/header/Header\";\n// import Dropdown from \"./components/Dropdown/Dropdown\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Home from \"./components/Home/Home\";\nimport Cities from \"./components/Cities/Cities\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar />\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/cities\" component={Cities} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}